import os
import asyncio
from functools import wraps
from keep_alive import keep_alive
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- –ü—Ä–µ–¥–º–µ—Ç—ã ---
SUBJECTS = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"nominative": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "accusative": "–º–∞—Ç–µ–º–∞—Ç–∏–∫—É"},
    "–§–∏–∑–∏–∫–∞": {"nominative": "–§–∏–∑–∏–∫–∞", "accusative": "—Ñ–∏–∑–∏–∫—É"},
    "–•–∏–º–∏—è": {"nominative": "–•–∏–º–∏—è", "accusative": "—Ö–∏–º–∏—é"},
    "–ë–∏–æ–ª–æ–≥–∏—è": {"nominative": "–ë–∏–æ–ª–æ–≥–∏—è", "accusative": "–±–∏–æ–ª–æ–≥–∏—é"},
    "–†—É—Å—Å–∫–∏–π": {"nominative": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "accusative": "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"},
    "–ë–∏–æ—Ö–∏–º–∏—è": {"nominative": "–ë–∏–æ—Ö–∏–º–∏—è", "accusative": "–±–∏–æ—Ö–∏–º–∏—é"}
}

# --- –ê–¥–º–∏–Ω ---
ADMIN_ID = 7972251746
ADMIN_USERNAME = "@dogwarts_admin"

# --- Google Sheets ---
GOOGLE_SHEET_NAME = "DogMathism"
CREDENTIALS_FILE = "credentials.json"

# --- –ö–∞–Ω–∞–ª—ã ---
CHANNELS_BY_SUBJECT = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "@DogMathic",
    "–§–∏–∑–∏–∫–∞": "@DogPhysic",
    "–•–∏–º–∏—è": "@DogChemik",
    "–ë–∏–æ–ª–æ–≥–∏—è": "@DogBio",
    "–†—É—Å—Å–∫–∏–π": "@DogRussik",
    "–ë–∏–æ—Ö–∏–º–∏—è": "@DogBioChemik",
}

# --- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ---
materials_files = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [("–°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏.pdf", "materials/math/Circle.pdf"),
                   ("–ì–∞–π–¥ –≤–µ–∫—Ç–æ—Ä—ã.pdf", "materials/math/Vectors.pdf")],
    "–§–∏–∑–∏–∫–∞": [("–û—Å–Ω–æ–≤—ã –º–µ—Ö–∞–Ω–∏–∫–∏.pdf", "materials/physics_mechanics.pdf")],
    "–•–∏–º–∏—è": [("–¢–∞–±–ª–∏—Ü–∞ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞.pdf", "materials/chem_periodic_table.pdf")],
    "–ë–∏–æ–ª–æ–≥–∏—è": [("–ö–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è.pdf", "materials/bio_cell_biology.pdf")],
    "–†—É—Å—Å–∫–∏–π": [("–ü—Ä–∞–≤–∏–ª–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏.pdf", "materials/rus_orthography_rules.pdf")],
    "–ë–∏–æ—Ö–∏–º–∏—è": [("–û—Å–Ω–æ–≤—ã –±–∏–æ—Ö–∏–º–∏–∏.pdf", "materials/biochem_basics.pdf")],
}

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
users_data = {}

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" ---
def typing_action(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.message:
            await update.message.reply_chat_action("typing")
        elif update.callback_query:
            await update.callback_query.message.reply_chat_action("typing")
        await asyncio.sleep(0.7)
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- –ó–∞–ø–∏—Å—å –≤ Google Sheets ---
def write_to_sheet(data):
    try:
        scope = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
        client = gspread.authorize(creds)
        sheet = client.open(GOOGLE_SHEET_NAME).sheet1
        row = [
            data.get("nickname", "‚Äî"),
            data.get("phone", "‚Äî"),
            data.get("role", "‚Äî"),
            data.get("subject", "‚Äî"),
            data.get("class", "‚Äî"),
            data.get("exam", "‚Äî")
        ]
        sheet.append_row(row)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

# --- /start ---
@typing_action
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users_data[user_id] = {"step": "role"}
    keyboard = [
        [InlineKeyboardButton("–£—á–µ–Ω–∏–∫", callback_data="role_student")],
        [InlineKeyboardButton("–†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")],
        [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞", callback_data="role_university")],
        [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")]
    ]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>DogWarts</b> - <b>—à–∫–æ–ª—É</b>, –≥–¥–µ –∑–Ω–∞–Ω–∏—è —Å–∏–ª—å–Ω–µ–µ <b>–º–∞–≥–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –í—ã–±–æ—Ä —Ä–æ–ª–∏ ---
@typing_action
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    role = query.data.split("_")[1]
    users_data[user_id]["role"] = role
    users_data[user_id]["nickname"] = update.effective_user.username or "‚Äî"

    if role == "student":
        # –°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞ - —Ç–æ–ª—å–∫–æ –±–∏–æ—Ö–∏–º–∏—è
        users_data[user_id]["subject"] = "–ë–∏–æ—Ö–∏–º–∏—è"
        await ask_phone_if_needed(update, context)
    elif role == "teacher":
        await query.message.reply_text(
            f"–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º {ADMIN_USERNAME}"
        )
        users_data[user_id]["step"] = None
    elif role in ["student", "parent"]:
        # –£—á–µ–Ω–∏–∫ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å
        if role == "parent":
            # –†–æ–¥–∏—Ç–µ–ª—å ‚Äì —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—å
            keyboard = [
                [InlineKeyboardButton(subj, callback_data=f"subject|{subj}")]
                for subj in SUBJECTS if subj != "–ë–∏–æ—Ö–∏–º–∏—è"
            ]
            users_data[user_id]["step"] = "subject"
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            # –£—á–µ–Ω–∏–∫ ‚Äì –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [
                [InlineKeyboardButton("–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è", callback_data="action_register")],
                [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="action_materials")]
            ]
            users_data[user_id]["step"] = "action"
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# --- –î–µ–π—Å—Ç–≤–∏–µ —É—á–µ–Ω–∏–∫–∞ ---
@typing_action
async def student_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    action = query.data.split("_")[1]
    users_data[user_id]["action"] = action
    if action == "register":
        keyboard = [
            [InlineKeyboardButton(subj, callback_data=f"subject|{subj}")]
            for subj in SUBJECTS if subj != "–ë–∏–æ—Ö–∏–º–∏—è"
        ]
        users_data[user_id]["step"] = "subject"
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        # –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äì —Å–ø—Ä–æ—Å–∏–º –∫–ª–∞—Å—Å
        users_data[user_id]["step"] = "class"
        await send_class_menu(update, context)

# --- –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ ---
@typing_action
async def choose_subject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    subject = query.data.split("|")[1]
    users_data[user_id]["subject"] = subject
    await ask_phone_if_needed(update, context)

# --- –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ---
async def ask_phone_if_needed(update, context):
    user_id = update.effective_user.id
    role = users_data[user_id]["role"]
    action = users_data[user_id].get("action")
    if role in ["student", "parent"] and (action == "register" or role=="parent"):
        users_data[user_id]["step"] = "phone"
        keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]]
        await update.callback_query.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
        await save_and_send_materials(update, context)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
@typing_action
async def phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    contact = update.message.contact
    users_data[user_id]["phone"] = contact.phone_number
    await save_and_send_materials(update, context)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
async def save_and_send_materials(update, context):
    user_id = update.effective_user.id
    data = users_data[user_id]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    write_to_sheet(data)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    phone_display = data.get("phone","‚Äî")
    notify_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"üë§ @{data.get('nickname','‚Äî')}\n"
        f"üìû {phone_display}\n"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {data.get('subject','‚Äî')}\n"
        f"üéì –†–æ–ª—å: {data.get('role','‚Äî')}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=notify_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
    # –ü–æ–∫–∞–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    await send_materials_menu(update, context, user_id)
    users_data[user_id]["step"] = None

# --- –ö–ª–∞—Å—Å (–¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±–µ–∑ –∑–∞–ø–∏—Å–∏) ---
async def send_class_menu(update, context):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("5", callback_data="class|5"),
         InlineKeyboardButton("6", callback_data="class|6")],
        [InlineKeyboardButton("7", callback_data="class|7"),
         InlineKeyboardButton("8", callback_data="class|8")],
        [InlineKeyboardButton("10", callback_data="class|10")],
        [InlineKeyboardButton("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠", callback_data="class|OGE"),
         InlineKeyboardButton("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠", callback_data="class|EGE")]
    ]
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
@typing_action
async def class_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    class_choice = query.data.split("|")[1]
    users_data[user_id]["class"] = class_choice
    await save_and_send_materials(update, context)

# --- –ú–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
async def send_materials_menu(update, context, user_id):
    subject = users_data[user_id]["subject"]
    files = materials_files.get(subject)
    if not files:
        await update.callback_query.message.reply_text("üìÇ –î–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return
    keyboard = [[InlineKeyboardButton(name, callback_data=f"material|{subject}|{idx}")]
                for idx, (name, _) in enumerate(files)]
    await update.callback_query.message.reply_text(
        f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ {subject}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º ---
@typing_action
async def send_material_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        _, subject, idx_str = query.data.split("|")
        idx = int(idx_str)
    except:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    files = materials_files.get(subject)
    if not files or idx >= len(files):
        await query.message.reply_text("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    filename, filepath = files[idx]
    try:
        progress_msg = await query.message.reply_text("–ì–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")
        total_steps = 10
        for step in range(1, total_steps+1):
            await asyncio.sleep(0.3)
            bar = "‚ñà"*step + "‚ñë"*(total_steps-step)
            percent = step*10
            await progress_msg.edit_text(f"–ì–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [{bar}] {percent}%")
        with open(filepath, "rb") as f:
            await query.message.reply_document(document=InputFile(f), filename=filename)
        await progress_msg.delete()
    except FileNotFoundError:
        await query.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ send_material_file: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")

# --- –û—à–∏–±–∫–∏ ---
async def error_handler(update, context):
    print(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")

# --- Main ---
def main():
    keep_alive()
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_role, pattern="^role_"))
    app.add_handler(CallbackQueryHandler(student_action, pattern="^action_"))
    app.add_handler(CallbackQueryHandler(choose_subject, pattern="^subject\|"))
    app.add_handler(CallbackQueryHandler(class_choice, pattern="^class\|"))
    app.add_handler(CallbackQueryHandler(send_material_file, pattern="^material\|"))
    app.add_handler(MessageHandler(filters.CONTACT, phone_input))
    app.add_error_handler(error_handler)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

    


