from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã === #
CHOOSING_SUBJECT, ASK_PHONE = range(2)
SUBJECTS = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π", "–•–∏–º–∏—è", "–§–∏–∑–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è"]
ADMIN_USERNAMES = ["your_admin_username"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram username –±–µ–∑ @
GOOGLE_SHEET_NAME = "–ù–∞–∑–≤–∞–Ω–∏–µ_–≤–∞—à–µ–π_—Ç–∞–±–ª–∏—Ü—ã"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π Google —Ç–∞–±–ª–∏—Ü—ã
CREDENTIALS_FILE = "credentials.json"  # –§–∞–π–ª –∫–ª—é—á–µ–π –æ—Ç Google API

# === –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π === #
users_data = {}

# === –§—É–Ω–∫—Ü–∏–∏ Google Sheets === #
def write_to_sheet(username, phone, subject):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    sheet.append_row([username or "‚Äî", phone, subject])

def read_all_entries():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    return sheet.get_all_values()[1:]  # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ === #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(subject, callback_data=subject)] for subject in SUBJECTS
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞ –∫–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_SUBJECT

async def subject_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    subject = query.data
    user_id = query.from_user.id

    users_data[user_id] = {
        "username": query.from_user.username,
        "subject": subject
    }

    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        one_time_keyboard=True,
        resize_keyboard=True
    )

    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=reply_markup)
    return ASK_PHONE

async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.message.from_user.id
    phone_number = contact.phone_number

    users_data[user_id]["phone"] = phone_number

    write_to_sheet(
        users_data[user_id].get("username"),
        users_data[user_id]["phone"],
        users_data[user_id]["subject"]
    )

    await update.message.reply_text(
        f"‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {users_data[user_id]['subject']}!
üìö –ù–∞–ø–∏—à–∏ /materials, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
        reply_markup=ReplyKeyboardMarkup([["/materials"]], resize_keyboard=True)
    )
    return ConversationHandler.END

async def send_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    user_subject = None

    for user in users_data.values():
        if user.get("username") == username:
            user_subject = user.get("subject")
            break

    if not user_subject:
        await update.message.reply_text("üòï –¢—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    materials = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "üìò –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: https://example.com/math",
        "–†—É—Å—Å–∫–∏–π": "üìô –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É: https://example.com/russian",
        "–•–∏–º–∏—è": "‚öóÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ö–∏–º–∏–∏: https://example.com/chemistry",
        "–§–∏–∑–∏–∫–∞": "üìó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ñ–∏–∑–∏–∫–µ: https://example.com/physics",
        "–ë–∏–æ–ª–æ–≥–∏—è": "üß¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –±–∏–æ–ª–æ–≥–∏–∏: https://example.com/biology"
    }

    await update.message.reply_text(materials.get(user_subject, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."))

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    entries = read_all_entries()
    if not entries:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    text = "üìã –ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:

"
    for row in entries:
        text += f"üë§ @{row[0]}
üìû {row[1]}
üìò {row[2]}

"

    await update.message.reply_text(text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BOTFATHER").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_SUBJECT: [CallbackQueryHandler(subject_chosen)],
            ASK_PHONE: [MessageHandler(filters.CONTACT, phone_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("materials", send_materials))
    app.add_handler(CommandHandler("admin", admin_panel))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()