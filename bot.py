
import os
from keep_alive import keep_alive
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

CHOOSING_SUBJECT, ASK_PHONE = range(2)
SUBJECTS = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–†—É—Å—Å–∫–∏–π"]
ADMIN_USERNAMES = ["dogmathism_admin"]
ADMIN_ID = 7972251746
GOOGLE_SHEET_NAME = "DogMathism"
CREDENTIALS_FILE = "credentials.json"

users_data = {}

def write_to_sheet(username, phone, subject):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    sheet.append_row([username or "‚Äî", phone, subject])

def read_all_entries():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    return sheet.get_all_values()[1:]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(subject, callback_data=subject)] for subject in SUBJECTS]
    await update.message.reply_text(
    "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
    "–¢—ã –≤ DogMathism ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —à–∫–æ–ª–∞, –∞ —Å–µ–º—å—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ—Å–ø–∏—Ç—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–±–∞–ª–ª—å–Ω–∏–∫–æ–≤ üíØ\n\n"
    "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –æ–Ω–ª–∞–π–Ω-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏,\n"
    "–Ω–æ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å —É—á—ë–±—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π, –∂–∏–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å üìö\n\n"
    "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n"
    "‚Ä¢ üß† –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî @dogmathic\n"
    "‚Ä¢ üî¨ –•–∏–º–∏—è ‚Äî @dogchemik\n"
    "‚Ä¢ üìñ –†—É—Å—Å–∫–∏–π ‚Äî @dogrussik\n"
    "‚Ä¢ üåø –ë–∏–æ–ª–æ–≥–∏—è ‚Äî @dogbio\n"
    "‚Ä¢ ‚öôÔ∏è –§–∏–∑–∏–∫–∞ ‚Äî @dogphysic\n\n"
    "üí¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @DogMathism_admin\n\n"
    "–ù–∞ –∫–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? üëá",
    reply_markup=InlineKeyboardMarkup(keyboard)
)
    return CHOOSING_SUBJECT

async def subject_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    subject = query.data
    user_id = query.from_user.id
    users_data[user_id] = {
        "username": query.from_user.username,
        "subject": subject
    }
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ç–µ–ª–µ–≥—É:", reply_markup=reply_markup)
    return ASK_PHONE

async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.message.from_user.id
    phone_number = contact.phone_number
    users_data[user_id]["phone"] = phone_number
    username = users_data[user_id].get("username")
    subject = users_data[user_id]["subject"]

    write_to_sheet(username, phone_number, subject)

    notify_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!"
        f"üë§ @{username or '‚Äî'}"
        f"üìû {phone_number}"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=notify_text)

    await update.message.reply_text(f"‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {subject}!üìö –ù–∞–ø–∏—à–∏ /materials, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
        reply_markup=ReplyKeyboardMarkup([["/materials"]], resize_keyboard=True)
    )
    return ConversationHandler.END

async def send_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    user_subject = None
    for user in users_data.values():
        if user.get("username") == username:
            user_subject = user.get("subject")
            break
    if not user_subject:
        await update.message.reply_text("üòï –¢—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return
    materials = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "üìò –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: https://example.com/math",
        "–§–∏–∑–∏–∫–∞": "üìó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ñ–∏–∑–∏–∫–µ: https://example.com/physics",
        "–•–∏–º–∏—è": "üß™ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ö–∏–º–∏–∏: https://example.com/chem",
        "–ë–∏–æ–ª–æ–≥–∏—è": "üåø –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –±–∏–æ–ª–æ–≥–∏–∏: https://example.com/bio",
        "–†—É—Å—Å–∫–∏–π": "üìñ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä—É—Å—Å–∫–æ–º—É: https://example.com/rus"
    }
    await update.message.reply_text(materials.get(user_subject, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."))

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    entries = read_all_entries()
    if not entries:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    text = "üìã –ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:"
    for row in entries:
        text += f"üë§ @{row[0]}üìû {row[1]}üìò {row[2]}"
    await update.message.reply_text(text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    keep_alive() 
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_SUBJECT: [CallbackQueryHandler(subject_chosen)],
            ASK_PHONE: [MessageHandler(filters.CONTACT, phone_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("materials", send_materials))
    app.add_handler(CommandHandler("admin", admin_panel))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
