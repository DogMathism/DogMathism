import os
import asyncio
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
from keep_alive import keep_alive
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google-credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("DogWarts_Requests").sheet1

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
ADMIN_ID = os.getenv("ADMIN_ID")

materials_files = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [("–ê–ª–≥–µ–±—Ä–∞.pdf", "materials/math/algebra.pdf")],
    "–•–∏–º–∏—è": [("–•–∏–º–∏—è.pdf", "materials/chemistry/chemistry.pdf")],
    "–ë–∏–æ–ª–æ–≥–∏—è": [("–ë–∏–æ–ª–æ–≥–∏—è.pdf", "materials/biology/biology.pdf")],
    "–§–∏–∑–∏–∫–∞": [("–§–∏–∑–∏–∫–∞.pdf", "materials/physics/physics.pdf")],
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": [("–†—É—Å—Å–∫–∏–π.pdf", "materials/russian/russian.pdf")],
    "–ë–∏–æ—Ö–∏–º–∏—è": [("–ë–∏–æ—Ö–∏–º–∏—è.pdf", "materials/biochem/biochemistry.pdf")]
}

CHANNELS_BY_SUBJECT = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "@DogMathic",
    "–•–∏–º–∏—è": "@DogChemik",
    "–ë–∏–æ–ª–æ–≥–∏—è": "@DogBio",
    "–§–∏–∑–∏–∫–∞": "@DogPhysic",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "@DogRussik",
    "–ë–∏–æ—Ö–∏–º–∏—è": "@DogBioChemik"
}

users_data = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def typing_action(func):
    async def wrapper(update, context, *args, **kwargs):
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        return await func(update, context, *args, **kwargs)
    return wrapper

def write_to_sheet(data):
    try:
        sheet.append_row([data.get("role"), data.get("nickname"), data.get("phone", "-"),
                          data.get("class", "-"), data.get("subject", "-")])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

async def check_subscription(update, context, subject):
    channel_username = CHANNELS_BY_SUBJECT.get(subject)
    if not channel_username:
        return True
    try:
        member = await context.bot.get_chat_member(channel_username, update.effective_user.id)
        return member.status in ["member", "creator", "administrator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def return_to_role_selection(update):
    user_id = update.effective_user.id
    users_data[user_id]["step"] = "role"
    keyboard = [
        [InlineKeyboardButton("–£—á–µ–Ω–∏–∫", callback_data="role_student")],
        [InlineKeyboardButton("–†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")],
        [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞", callback_data="role_university")],
        [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")]
    ]
    await asyncio.sleep(1)
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- Handlers ---
@typing_action
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users_data[user_id] = {"step": "role"}
    await update.message.reply_text(
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DogWarts** ‚Äì —à–∫–æ–ª—É, –≥–¥–µ –∑–Ω–∞–Ω–∏—è —Å–∏–ª—å–Ω–µ–µ –º–∞–≥–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–£—á–µ–Ω–∏–∫", callback_data="role_student")],
            [InlineKeyboardButton("–†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")],
            [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞", callback_data="role_university")],
            [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")]
        ]),
        parse_mode="Markdown"
    )

async def choose_role(update: Update, context):
    query = update.callback_query
    await query.answer()
    role = query.data.replace("role_", "")
    user_id = update.effective_user.id
    users_data[user_id]["role"] = role

    if role == "student":
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è", callback_data="action_register")],
            [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="action_materials")]
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif role == "parent":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏:",
                                       reply_markup=subjects_keyboard(exclude=["–ë–∏–æ—Ö–∏–º–∏—è"]))
    elif role == "university":
        await query.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ë–∏–æ—Ö–∏–º–∏—è:",
                                       reply_markup=subjects_keyboard(only=["–ë–∏–æ—Ö–∏–º–∏—è"]))
    else:
        await query.message.reply_text("–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: @DogWarts_admin")

def subjects_keyboard(exclude=None, only=None):
    subjects = [s for s in materials_files.keys() if (not exclude or s not in exclude)]
    if only:
        subjects = [s for s in subjects if s in only]
    return InlineKeyboardMarkup([[InlineKeyboardButton(s, callback_data=f"subject|{s}")] for s in subjects])

async def student_action(update, context):
    query = update.callback_query
    await query.answer()
    action = query.data.replace("action_", "")
    user_id = update.effective_user.id
    users_data[user_id]["action"] = action

    if action == "register":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subjects_keyboard(exclude=["–ë–∏–æ—Ö–∏–º–∏—è"]))
    else:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=subjects_keyboard())

async def choose_subject(update, context):
    query = update.callback_query
    await query.answer()
    _, subject = query.data.split("|")
    user_id = update.effective_user.id
    users_data[user_id]["subject"] = subject

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (@username):")
    users_data[user_id]["step"] = "nickname"

async def nickname_input(update, context):
    user_id = update.effective_user.id
    text = update.message.text
    users_data[user_id]["nickname"] = text

    role = users_data[user_id].get("role")
    action = users_data[user_id].get("action", "")

    if role in ["student", "parent"] and action == "register":
        # –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardMarkup([[button]], resize_keyboard=True))
        users_data[user_id]["step"] = "phone"
    else:
        await save_and_send_materials(update, context)

async def phone_input(update, context):
    user_id = update.effective_user.id
    contact = update.message.contact
    users_data[user_id]["phone"] = contact.phone_number
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await save_and_send_materials(update, context)

async def save_and_send_materials(update, context):
    user_id = update.effective_user.id
    data = users_data[user_id]
    write_to_sheet(data)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    notify_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"üë§ {data.get('nickname')}\n"
        f"üìû {data.get('phone', '-')}\n"
        f"üìò {data.get('subject')}\n"
        f"üéì –†–æ–ª—å: {data.get('role')}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=notify_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    subscribed = await check_subscription(update, context, data.get("subject"))
    if not subscribed:
        await update.message.reply_text(f"‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNELS_BY_SUBJECT[data.get('subject')]} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    await send_materials_menu(update, context, user_id)
    await return_to_role_selection(update)

async def send_materials_menu(update, context, user_id):
    subject = users_data[user_id]["subject"]
    files = materials_files.get(subject)
    if files:
        keyboard = [[InlineKeyboardButton(name, callback_data=f"material|{subject}|{idx}")]
                    for idx, (name, _) in enumerate(files)]
        await update.message.reply_text(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ {subject}:", reply_markup=InlineKeyboardMarkup(keyboard))

async def send_material_file(update, context):
    query = update.callback_query
    await query.answer()
    _, subject, idx_str = query.data.split("|")
    idx = int(idx_str)
    files = materials_files.get(subject)
    if not files or idx >= len(files):
        await query.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    filename, filepath = files[idx]
    progress_msg = await query.message.reply_text("–ì–æ—Ç–æ–≤–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")
    total_steps = 10
    for step in range(1, total_steps + 1):
        await asyncio.sleep(0.3)
        bar = "‚ñà" * step + "‚ñë" * (total_steps - step)
        await progress_msg.edit_text(f"–ì–æ—Ç–æ–≤–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [{bar}] {step*10}%")
    with open(filepath, "rb") as f:
        await query.message.reply_document(document=InputFile(f), filename=filename)
    await progress_msg.delete()

# --- Main ---
def main():
    keep_alive()
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_role, pattern="^role_"))
    app.add_handler(CallbackQueryHandler(student_action, pattern="^action_"))
    app.add_handler(CallbackQueryHandler(choose_subject, pattern="^subject\|"))
    app.add_handler(CallbackQueryHandler(send_material_file, pattern="^material\|"))
    app.add_handler(MessageHandler(filters.CONTACT, phone_input))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, nickname_input))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

    


