import os
import asyncio
from functools import wraps
from keep_alive import keep_alive
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
ASK_PHONE = 0

# --- –ü—Ä–µ–¥–º–µ—Ç—ã —Å –ø–∞–¥–µ–∂–∞–º–∏ ---
SUBJECTS = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {
        "nominative": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "accusative": "–º–∞—Ç–µ–º–∞—Ç–∏–∫—É",
        "prepositional": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
    },
    "–§–∏–∑–∏–∫–∞": {
        "nominative": "–§–∏–∑–∏–∫–∞",
        "accusative": "—Ñ–∏–∑–∏–∫—É",
        "prepositional": "—Ñ–∏–∑–∏–∫–µ"
    },
    "–•–∏–º–∏—è": {
        "nominative": "–•–∏–º–∏—è",
        "accusative": "—Ö–∏–º–∏—é",
        "prepositional": "—Ö–∏–º–∏–∏"
    },
    "–ë–∏–æ–ª–æ–≥–∏—è": {
        "nominative": "–ë–∏–æ–ª–æ–≥–∏—è",
        "accusative": "–±–∏–æ–ª–æ–≥–∏—é",
        "prepositional": "–±–∏–æ–ª–æ–≥–∏–∏"
    },
    "–†—É—Å—Å–∫–∏–π": {
        "nominative": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "accusative": "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "prepositional": "—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
    },
    "–ë–∏–æ—Ö–∏–º–∏—è": {
        "nominative": "–ë–∏–æ—Ö–∏–º–∏—è",
        "accusative": "–±–∏–æ—Ö–∏–º–∏—é",
        "prepositional": "–±–∏–æ—Ö–∏–º–∏–∏"
    }
}

# --- –ê–¥–º–∏–Ω ---
ADMIN_ID = 7972251746
ADMIN_USERNAME = "@dogwarts_admin"

# --- Google Sheets ---
GOOGLE_SHEET_NAME = "DogMathism"
CREDENTIALS_FILE = "credentials.json"

# --- –ö–∞–Ω–∞–ª—ã ---
CHANNELS_BY_SUBJECT = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "@DogMathic",
    "–§–∏–∑–∏–∫–∞": "@DogPhysic",
    "–•–∏–º–∏—è": "@DogChemik",
    "–ë–∏–æ–ª–æ–≥–∏—è": "@DogBio",
    "–†—É—Å—Å–∫–∏–π": "@DogRussik",
    "–ë–∏–æ—Ö–∏–º–∏—è": "@DogBioChemik",
}

# --- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ---
materials_files = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [
        ("–°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏.pdf", "materials/math/Circle.pdf"),
        ("–ì–∞–π–¥ –≤–µ–∫—Ç–æ—Ä—ã.pdf", "materials/math/Vectors.pdf"),
    ],
    "–§–∏–∑–∏–∫–∞": [
        ("–û—Å–Ω–æ–≤—ã –º–µ—Ö–∞–Ω–∏–∫–∏.pdf", "materials/physics_mechanics.pdf"),
    ],
    "–•–∏–º–∏—è": [
        ("–¢–∞–±–ª–∏—Ü–∞ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞.pdf", "materials/chem_periodic_table.pdf"),
    ],
    "–ë–∏–æ–ª–æ–≥–∏—è": [
        ("–ö–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è.pdf", "materials/bio_cell_biology.pdf"),
    ],
    "–†—É—Å—Å–∫–∏–π": [
        ("–ü—Ä–∞–≤–∏–ª–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏.pdf", "materials/rus_orthography_rules.pdf"),
    ],
    "–ë–∏–æ—Ö–∏–º–∏—è": [
        ("–û—Å–Ω–æ–≤—ã –±–∏–æ—Ö–∏–º–∏–∏.pdf", "materials/biochem_basics.pdf"),
    ],
}

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
users_data = {}

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç" ---
def typing_action(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.message:
            await update.message.reply_chat_action("typing")
        elif update.callback_query:
            await update.callback_query.message.reply_chat_action("typing")
        await asyncio.sleep(0.7)
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π ---
def write_to_sheet(username, phone, subject):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    sheet.append_row([username or "‚Äî", phone, subject])

def read_all_entries():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    return sheet.get_all_values()[1:]

# --- –°—Ç–∞—Ä—Ç ---
@typing_action
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(data["nominative"], callback_data=subject)] for subject, data in SUBJECTS.items()]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>DogWarts</b> ‚Äî —à–∫–æ–ª—É, –≥–¥–µ –∑–Ω–∞–Ω–∏—è —Å–∏–ª—å–Ω–µ–µ –º–∞–≥–∏–∏!\n\n"
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n"
        "üß† –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - @DogMathic\n"
        "üß™ –•–∏–º–∏—è - @DogChemik\n"
        "‚öõÔ∏è –ë–∏–æ—Ö–∏–º–∏—è - @DogBioChemik\n"
        "üìñ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - @DogRussik\n"
        "üåø –ë–∏–æ–ª–æ–≥–∏—è - @DogBio\n"
        "‚öôÔ∏è –§–∏–∑–∏–∫–∞ - @DogPhysic\n\n"
        f"üí¨ –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–ø–∏—Å—å ‚Äî {ADMIN_USERNAME}\n\n"
        "–í—ã–±–∏—Ä–∞–π –ø—Ä–µ–¥–º–µ—Ç üëá",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
@typing_action
async def choose_subject_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    subject = query.data
    user_id = update.effective_user.id

    if user_id in users_data and "phone" in users_data[user_id]:
        users_data[user_id]["subject"] = subject
        await query.message.reply_text(f"‚úÖ —Ç—ã –≤—ã–±—Ä–∞–ª {SUBJECTS[subject]['accusative']} üìö")
        await materials_menu(update, context)
    else:
        users_data[user_id] = {"username": query.from_user.username, "subject": subject}
        reply_markup = ReplyKeyboardMarkup(
            [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Ç–≥:", reply_markup=reply_markup)
        return ASK_PHONE

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
@typing_action
async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.effective_user.id
    phone_number = contact.phone_number
    users_data[user_id]["phone"] = phone_number
    username = users_data[user_id].get("username")
    subject = users_data[user_id]["subject"]

    write_to_sheet(username, phone_number, subject)

    notify_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"üë§ @{username or '‚Äî'}\n"
        f"üìû {phone_number}\n"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=notify_text)

    await update.message.reply_text(
        f"‚úÖ —Ç—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {SUBJECTS[subject]['accusative']} üìö\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=ReplyKeyboardMarkup([["üìÇ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"]], resize_keyboard=True)
    )

    return ConversationHandler.END

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def is_subscribed(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str) -> bool:
    channel_username = CHANNELS_BY_SUBJECT.get(subject)
    if not channel_username:
        return True
    try:
        member = await context.bot.get_chat_member(channel_username, update.effective_user.id)
        return member.status in ["member", "creator", "administrator"]
    except Exception:
        return False

# --- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
@typing_action
async def send_material_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    if len(data) != 3:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    _, subject, idx_str = data
    idx = int(idx_str)

    files = materials_files.get(subject)
    if not files or idx >= len(files):
        await query.message.reply_text("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    filename, filepath = files[idx]

    try:
        progress_msg = await query.message.reply_text("–ì–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")
        total_steps = 10
        for step in range(1, total_steps + 1):
            await asyncio.sleep(0.5)
            bar = "‚ñà" * step + "‚ñë" * (total_steps - step)
            percent = step * 10
            await progress_msg.edit_text(f"–ì–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [{bar}] {percent}%")

        with open(filepath, "rb") as f:
            await query.message.reply_document(document=InputFile(f), filename=filename)

        await progress_msg.delete()

    except FileNotFoundError:
        await query.message.reply_text("–§–∞–π–ª —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

# --- –ú–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
@typing_action
async def materials_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = users_data.get(user_id)
    if not user_info:
        await update.message.reply_text("üòï —Ç—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    subject = user_info.get("subject")

    subscribed = await is_subscribed(update, context, subject)
    if not subscribed:
        await update.message.reply_text(
            f"‚ùå –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNELS_BY_SUBJECT.get(subject, '–∫–∞–Ω–∞–ª')} –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        )
        return

    files = materials_files.get(subject)
    if not files:
        await update.message.reply_text("üìÇ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"material|{subject}|{idx}")]
        for idx, (name, _) in enumerate(files)
    ]
    await update.message.reply_text(
        f"üìö –≤—ã–±–µ—Ä–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ {SUBJECTS[subject]['prepositional']}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –ê–¥–º–∏–Ω–∫–∞ ---
@typing_action
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if username != ADMIN_USERNAME.strip("@"):
        await update.message.reply_text("‚õî —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    entries = read_all_entries()
    if not entries:
        await update.message.reply_text("üì≠ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    text = "üìã –∑–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for row in entries:
        text += f"üë§ @{row[0]} üìû {row[1]} üìò {row[2]}\n"
    await update.message.reply_text(text)

# --- –û—Ç–º–µ–Ω–∞ ---
@typing_action
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# --- Main ---
def main():
    keep_alive()
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    # ConversationHandler –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PHONE: [MessageHandler(filters.CONTACT, phone_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=True
    )
    app.add_handler(conv_handler)

    # CallbackQueryHandler –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    app.add_handler(CallbackQueryHandler(choose_subject_callback, pattern="^(" + "|".join(SUBJECTS.keys()) + ")$"))

    # CallbackQueryHandler –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    app.add_handler(CallbackQueryHandler(send_material_file, pattern=r"^material\|"))

    # –ö–Ω–æ–ø–∫–∞ "–º–∞—Ç–µ—Ä–∏–∞–ª—ã"
    app.add_handler(MessageHandler(filters.Regex("^(üìÇ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)$"), materials_menu))

    app.add_handler(CommandHandler("admin", admin_panel))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

