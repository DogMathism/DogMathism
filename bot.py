import os
import asyncio
from functools import wraps
from keep_alive import keep_alive
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- –ü—Ä–µ–¥–º–µ—Ç—ã ---
SUBJECTS = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"nominative": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "accusative": "–º–∞—Ç–µ–º–∞—Ç–∏–∫—É"},
    "–§–∏–∑–∏–∫–∞": {"nominative": "–§–∏–∑–∏–∫–∞", "accusative": "—Ñ–∏–∑–∏–∫—É"},
    "–•–∏–º–∏—è": {"nominative": "–•–∏–º–∏—è", "accusative": "—Ö–∏–º–∏—é"},
    "–ë–∏–æ–ª–æ–≥–∏—è": {"nominative": "–ë–∏–æ–ª–æ–≥–∏—è", "accusative": "–±–∏–æ–ª–æ–≥–∏—é"},
    "–†—É—Å—Å–∫–∏–π": {"nominative": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "accusative": "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"},
    "–ë–∏–æ—Ö–∏–º–∏—è": {"nominative": "–ë–∏–æ—Ö–∏–º–∏—è", "accusative": "–±–∏–æ—Ö–∏–º–∏—é"}
}

# --- –ê–¥–º–∏–Ω ---
ADMIN_ID = 7972251746
ADMIN_USERNAME = "@dogwarts_admin"

# --- Google Sheets ---
GOOGLE_SHEET_NAME = "DogMathism"
CREDENTIALS_FILE = "credentials.json"

# --- –ö–∞–Ω–∞–ª—ã ---
CHANNELS_BY_SUBJECT = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "@DogMathic",
    "–§–∏–∑–∏–∫–∞": "@DogPhysic",
    "–•–∏–º–∏—è": "@DogChemik",
    "–ë–∏–æ–ª–æ–≥–∏—è": "@DogBio",
    "–†—É—Å—Å–∫–∏–π": "@DogRussik",
    "–ë–∏–æ—Ö–∏–º–∏—è": "@DogBioChemik",
}

# --- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ---
materials_files = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [("–°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏.pdf", "materials/math/Circle.pdf"),
                   ("–ì–∞–π–¥ –≤–µ–∫—Ç–æ—Ä—ã.pdf", "materials/math/Vectors.pdf")],
    "–§–∏–∑–∏–∫–∞": [("–û—Å–Ω–æ–≤—ã –º–µ—Ö–∞–Ω–∏–∫–∏.pdf", "materials/physics_mechanics.pdf")],
    "–•–∏–º–∏—è": [("–¢–∞–±–ª–∏—Ü–∞ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞.pdf", "materials/chem_periodic_table.pdf")],
    "–ë–∏–æ–ª–æ–≥–∏—è": [("–ö–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è.pdf", "materials/bio_cell_biology.pdf")],
    "–†—É—Å—Å–∫–∏–π": [("–ü—Ä–∞–≤–∏–ª–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏.pdf", "materials/rus_orthography_rules.pdf")],
    "–ë–∏–æ—Ö–∏–º–∏—è": [("–û—Å–Ω–æ–≤—ã –±–∏–æ—Ö–∏–º–∏–∏.pdf", "materials/biochem_basics.pdf")],
}

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
users_data = {}

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" ---
def typing_action(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.message:
            await update.message.reply_chat_action("typing")
        elif update.callback_query:
            await update.callback_query.message.reply_chat_action("typing")
        await asyncio.sleep(0.7)
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- Google Sheets –∑–∞–ø–∏—Å—å ---
def write_to_sheet(username, phone, subject):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    sheet.append_row([username or "‚Äî", phone, subject])

# --- –°—Ç–∞—Ä—Ç ---
@typing_action
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(data["nominative"], callback_data=subject)] for subject, data in SUBJECTS.items()]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>DogWarts</b> - <b>—à–∫–æ–ª—É</b>, –≥–¥–µ –∑–Ω–∞–Ω–∏—è —Å–∏–ª—å–Ω–µ–µ <b>–º–∞–≥–∏–∏</b>\n\n"
        "üìö –ü—Ä–µ–¥–º–µ—Ç—ã:\n\n"
        "üß† –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - @DogMathic\n"
        "üß™ –•–∏–º–∏—è - @DogChemik\n"
        "‚öõÔ∏è –ë–∏–æ—Ö–∏–º–∏—è - @DogBioChemik\n"
        "üìñ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - @DogRussik\n"
        "üåø –ë–∏–æ–ª–æ–≥–∏—è - @DogBio\n"
        "‚öôÔ∏è –§–∏–∑–∏–∫–∞ - @DogPhysic\n\n"
        f"üí¨ –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–ø–∏—Å—å - {ADMIN_USERNAME}\n\n"
        "–í—ã–±–∏—Ä–∞–π –ø—Ä–µ–¥–º–µ—Ç –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É üëá",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ ---
@typing_action
async def choose_subject_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    subject = query.data.strip()
    user_id = update.effective_user.id

    users_data[user_id] = {"username": query.from_user.username, "subject": subject}

    # –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Å–µ–≥–¥–∞
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    await query.message.reply_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª {SUBJECTS[subject]['accusative']} ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç:",
        reply_markup=reply_markup
    )

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
@typing_action
async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.effective_user.id

    if user_id not in users_data or "subject" not in users_data[user_id]:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ /start.")
        return

    phone_number = contact.phone_number
    subject = users_data[user_id]["subject"]
    username = users_data[user_id].get("username")

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!", reply_markup=ReplyKeyboardRemove())

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    write_to_sheet(username, phone_number, subject)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    notify_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"üë§ @{username or '‚Äî'}\n"
        f"üìû {phone_number}\n"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=notify_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscribed = await is_subscribed(update, context, subject)
    if not subscribed:
        await update.message.reply_text(
            f"‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNELS_BY_SUBJECT[subject]} –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç —Å–Ω–æ–≤–∞."
        )
        return

    await update.message.reply_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∂–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ {SUBJECTS[subject]['accusative']}‚Ä¶"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    await send_all_materials_with_progress(update, context, subject)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def is_subscribed(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str) -> bool:
    channel_username = CHANNELS_BY_SUBJECT.get(subject)
    try:
        member = await context.bot.get_chat_member(channel_username, update.effective_user.id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º ---
async def send_all_materials_with_progress(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str):
    files = materials_files.get(subject, [])
    if not files:
        await update.message.reply_text("üìÇ –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return

    progress_msg = await update.message.reply_text("üì¶ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚Ä¶ [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")
    total = len(files)
    for i, (filename, filepath) in enumerate(files, start=1):
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        percent = int((i / total) * 100)
        filled = int(percent / 10)
        bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
        try:
            await progress_msg.edit_text(f"üì¶ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚Ä¶ [{bar}] {percent}%")
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        try:
            with open(filepath, "rb") as f:
                await update.message.reply_document(document=InputFile(f), filename=filename)
        except FileNotFoundError:
            await update.message.reply_text(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await asyncio.sleep(0.5)

    await progress_msg.edit_text("‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

# --- –ê–¥–º–∏–Ω–∫–∞ ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if username != ADMIN_USERNAME.strip("@"):
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫

# --- –û—à–∏–±–∫–∏ ---
async def error_handler(update, context):
    print(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")

# --- Main ---
def main():
    keep_alive()
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_subject_callback, pattern="^(" + "|".join(SUBJECTS.keys()) + ")$"))
    app.add_handler(MessageHandler(filters.CONTACT, phone_received))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_error_handler(error_handler)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

    


