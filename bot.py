import os
from keep_alive import keep_alive
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

CHOOSING_SUBJECT, ASK_PHONE, MATERIALS_MENU = range(3)
SUBJECTS = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–†—É—Å—Å–∫–∏–π"]
ADMIN_USERNAMES = ["dogmathism_admin"]
ADMIN_ID = 7972251746
GOOGLE_SHEET_NAME = "DogMathism"
CREDENTIALS_FILE = "credentials.json"

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
CHANNELS_BY_SUBJECT = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "@dogmathic",
    "–§–∏–∑–∏–∫–∞": "@dogphysic",
    "–•–∏–º–∏—è": "@dogchemik",
    "–ë–∏–æ–ª–æ–≥–∏—è": "@dogbio",
    "–†—É—Å—Å–∫–∏–π": "@dogrussik",
}

# –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
materials_files = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [
        ("–°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏.pdf", "materials/math/Circle.pdf"),
        ("–ì–∞–π–¥ –≤–µ–∫—Ç–æ—Ä—ã.pdf", "materials/math/Vectors.pdf"),
    ],
    "–§–∏–∑–∏–∫–∞": [
        ("–û—Å–Ω–æ–≤—ã –º–µ—Ö–∞–Ω–∏–∫–∏.pdf", "materials/physics_mechanics.pdf"),
    ],
    "–•–∏–º–∏—è": [
        ("–¢–∞–±–ª–∏—Ü–∞ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞.pdf", "materials/chem_periodic_table.pdf"),
    ],
    "–ë–∏–æ–ª–æ–≥–∏—è": [
        ("–ö–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è.pdf", "materials/bio_cell_biology.pdf"),
    ],
    "–†—É—Å—Å–∫–∏–π": [
        ("–ü—Ä–∞–≤–∏–ª–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏.pdf", "materials/rus_orthography_rules.pdf"),
    ],
}

users_data = {}

def write_to_sheet(username, phone, subject):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    sheet.append_row([username or "‚Äî", phone, subject])

def read_all_entries():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    return sheet.get_all_values()[1:]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(subject, callback_data=subject)] for subject in SUBJECTS]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–¢—ã –≤ DogMathism ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —à–∫–æ–ª–∞, –∞ —Å–µ–º—å—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ—Å–ø–∏—Ç—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–±–∞–ª–ª—å–Ω–∏–∫–æ–≤ üíØ\n\n"
        "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –æ–Ω–ª–∞–π–Ω-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏,\n"
        "–Ω–æ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å —É—á—ë–±—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π, –∂–∏–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å üìö\n\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n"
        "‚Ä¢ üß† –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî @dogmathic\n"
        "‚Ä¢ üî¨ –•–∏–º–∏—è ‚Äî @dogchemik\n"
        "‚Ä¢ üìñ –†—É—Å—Å–∫–∏–π ‚Äî @dogrussik\n"
        "‚Ä¢ üåø –ë–∏–æ–ª–æ–≥–∏—è ‚Äî @dogbio\n"
        "‚Ä¢ ‚öôÔ∏è –§–∏–∑–∏–∫–∞ ‚Äî @dogphysic\n\n"
        "üí¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @DogMathism_admin\n\n"
        "–ù–∞ –∫–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? üëá",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_SUBJECT

async def subject_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    subject = query.data
    user_id = query.from_user.id
    users_data[user_id] = {
        "username": query.from_user.username,
        "subject": subject
    }
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ç–µ–ª–µ–≥—É:", reply_markup=reply_markup)
    return ASK_PHONE

async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.message.from_user.id
    phone_number = contact.phone_number
    users_data[user_id]["phone"] = phone_number
    username = users_data[user_id].get("username")
    subject = users_data[user_id]["subject"]

    write_to_sheet(username, phone_number, subject)

    notify_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"üë§ @{username or '‚Äî'}\n"
        f"üìû {phone_number}\n"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=notify_text)

    await update.message.reply_text(
        f"‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {subject}! üìö –ù–∞–ø–∏—à–∏ /materials, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
        reply_markup=ReplyKeyboardMarkup([["/materials"]], resize_keyboard=True)
    )
    return ConversationHandler.END

async def is_subscribed(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str) -> bool:
    channel_username = CHANNELS_BY_SUBJECT.get(subject)
    if not channel_username:
        return True  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç ‚Äî –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    try:
        member = await context.bot.get_chat_member(channel_username, update.effective_user.id)
        return member.status in ["member", "creator", "administrator"]
    except Exception:
        return False

async def send_material_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")  # —Ñ–æ—Ä–º–∞—Ç: material|subject|index
    if len(data) != 3:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    _, subject, idx_str = data
    idx = int(idx_str)

    files = materials_files.get(subject)
    if not files or idx >= len(files):
        await query.message.reply_text("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    filename, filepath = files[idx]
    try:
        with open(filepath, "rb") as f:
            await query.message.reply_document(document=InputFile(f), filename=filename)
    except FileNotFoundError:
        await query.message.reply_text("–§–∞–π–ª —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

async def materials_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = users_data.get(user_id)
    if not user_info:
        await update.message.reply_text("üòï –¢—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    subject = user_info.get("subject")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–µ–¥–º–µ—Ç–∞
    subscribed = await is_subscribed(update, context, subject)
    if not subscribed:
        await update.message.reply_text(
            f"‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNELS_BY_SUBJECT.get(subject, '–∫–∞–Ω–∞–ª')} –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        )
        return

    files = materials_files.get(subject)
    if not files:
        await update.message.reply_text("üìÇ –î–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"material|{subject}|{idx}")]
        for idx, (name, _) in enumerate(files)
    ]
    await update.message.reply_text(
        f"üìö –í—ã–±–µ—Ä–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ {subject}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MATERIALS_MENU

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    entries = read_all_entries()
    if not entries:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    text = "üìã –ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for row in entries:
        text += f"üë§ @{row[0]} üìû {row[1]} üìò {row[2]}\n"
    await update.message.reply_text(text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    keep_alive()
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_SUBJECT: [CallbackQueryHandler(subject_chosen)],
            ASK_PHONE: [MessageHandler(filters.CONTACT, phone_received)],
            MATERIALS_MENU: [CallbackQueryHandler(send_material_file, pattern=r"^material\|")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("materials", materials_menu))
    app.add_handler(CommandHandler("admin", admin_panel))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
