import os
import asyncio
from functools import wraps
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import datetime
import pytz  # –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install pytz

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================

# –ê–¥–º–∏–Ω
ADMIN_ID = 7972251746  # int
ADMIN_USERNAME = "@dogwarts_admin"

# Google Sheets
GOOGLE_SHEET_NAME = "DogMathism"
CREDENTIALS_FILE = "credentials.json"

# –ö–∞–Ω–∞–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
CHANNELS_BY_SUBJECT = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "@DogMathic",
    "–§–∏–∑–∏–∫–∞": "@DogPhysic",
    "–•–∏–º–∏—è": "@DogChemik",
    "–ë–∏–æ–ª–æ–≥–∏—è": "@DogBio",
    "–†—É—Å—Å–∫–∏–π": "@DogRussik",
    "–ë–∏–æ—Ö–∏–º–∏—è": "@DogBioChemik",
}

# –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
materials_files = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [("–°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏.pdf", "materials/math/Circle.pdf"),
                   ("–ì–∞–π–¥ –≤–µ–∫—Ç–æ—Ä—ã.pdf", "materials/math/Vectors.pdf")],
    "–§–∏–∑–∏–∫–∞": [("–û—Å–Ω–æ–≤—ã –º–µ—Ö–∞–Ω–∏–∫–∏.pdf", "materials/physics_mechanics.pdf")],
    "–•–∏–º–∏—è": [("–¢–∞–±–ª–∏—Ü–∞ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞.pdf", "materials/chem_periodic_table.pdf")],
    "–ë–∏–æ–ª–æ–≥–∏—è": [("–ö–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è.pdf", "materials/bio_cell_biology.pdf")],
    "–†—É—Å—Å–∫–∏–π": [("–ü—Ä–∞–≤–∏–ª–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏.pdf", "materials/rus_orthography_rules.pdf")],
    "–ë–∏–æ—Ö–∏–º–∏—è": [("–û—Å–Ω–æ–≤—ã –±–∏–æ—Ö–∏–º–∏–∏.pdf", "materials/biochem_basics.pdf")],
}

# –°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

# ================== –£–¢–ò–õ–ò–¢–´ ==================

def typing_action(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        chat_id = update.effective_chat.id if update.effective_chat else None
        if chat_id:
            try:
                await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            except:
                pass
        await asyncio.sleep(0.2)
        return await func(update, context, *args, **kwargs)
    return wrapped

def write_to_sheet(row_dict: dict):
    """–ü–∏—à–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets."""
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
        client = gspread.authorize(creds)
        sheet = client.open(GOOGLE_SHEET_NAME).sheet1
        row = [
            row_dict.get("timestamp", "-"),
            row_dict.get("role", "-"),
            row_dict.get("action", "-"),
            row_dict.get("subject", "-"),
            row_dict.get("class", "-"),
            row_dict.get("nickname", "-"),
            row_dict.get("phone", "-"),
            str(row_dict.get("user_id", "-")),
        ]
        sheet.append_row(row)
    except Exception as e:
        print(f"[Sheets] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=text)
    except Exception as e:
        print(f"[Admin] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

def subjects_keyboard(exclude=None, only=None):
    subjects_all = list(materials_files.keys())
    if exclude:
        subjects = [s for s in subjects_all if s not in exclude]
    elif only:
        subjects = [s for s in subjects_all if s in only]
    else:
        subjects = subjects_all
    rows = [[InlineKeyboardButton(s, callback_data=f"subject|{s}")] for s in subjects]
    return InlineKeyboardMarkup(rows)

def class_keyboard():
    rows = [
        [InlineKeyboardButton("5", callback_data="class|5"),
         InlineKeyboardButton("6", callback_data="class|6")],
        [InlineKeyboardButton("7", callback_data="class|7"),
         InlineKeyboardButton("8", callback_data="class|8")],
        [InlineKeyboardButton("10", callback_data="class|10")],
        [InlineKeyboardButton("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠", callback_data="class|OGE"),
         InlineKeyboardButton("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠", callback_data="class|EGE")],
    ]
    return InlineKeyboardMarkup(rows)

async def check_subscription(context: ContextTypes.DEFAULT_TYPE, user_id: int, subject: str) -> bool:
    channel = CHANNELS_BY_SUBJECT.get(subject)
    if not channel:
        return True
    try:
        member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
        return member.status in ("member", "creator", "administrator")
    except Exception as e:
        print(f"[Subscribe] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({channel}): {e}")
        return False

async def reply(update: Update, text: str, **kwargs):
    """–£–¥–æ–±–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ (message –∏–ª–∏ callback)."""
    if update.message:
        return await update.message.reply_text(text, **kwargs)
    elif update.callback_query:
        return await update.callback_query.message.reply_text(text, **kwargs)

def get_username(update: Update) -> str:
    uname = update.effective_user.username
    if uname:
        if not uname.startswith("@"):
            uname = f"@{uname}"
        return uname
    return ""  # –Ω–µ—Ç username ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é

# ================== –•–ï–ù–î–õ–ï–†–´ ==================

# /start
@typing_action
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users_data[user_id] = {"step": "role"}  # —Å–±—Ä–æ—Å —Å—Ü–µ–Ω–∞—Ä–∏—è
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£—á–µ–Ω–∏–∫", callback_data="role|student")],
        [InlineKeyboardButton("–†–æ–¥–∏—Ç–µ–ª—å", callback_data="role|parent")],
        [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞", callback_data="role|university")],
        [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role|teacher")],
    ])
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>DogWarts</b> - <b>—à–∫–æ–ª—É</b>, –≥–¥–µ –∑–Ω–∞–Ω–∏—è —Å–∏–ª—å–Ω–µ–µ <b>–º–∞–≥–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        parse_mode="HTML",
        reply_markup=kb
    )

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
@typing_action
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = update.effective_user.id
    role = q.data.split("|")[1]  # student / parent / university / teacher
    users_data[user_id] = {"step": None, "role": role, "user_id": user_id}

    if role == "teacher":
        await q.message.reply_text(f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: {ADMIN_USERNAME}")
        await return_to_role_selection(update)
        return

    if role == "university":
        # –°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞: —Ç–æ–ª—å–∫–æ –±–∏–æ—Ö–∏–º–∏—è, –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–ª–∞—Å—Å–∞
        users_data[user_id]["action"] = "register"  # –ø–æ —Å—É—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –±–∏–æ—Ö–∏–º–∏—é
        users_data[user_id]["subject"] = "–ë–∏–æ—Ö–∏–º–∏—è"
        await ensure_nickname_then_continue(update, context, need_class=False, need_phone=False)
        return

    if role == "parent":
        # –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å
        users_data[user_id]["action"] = "register"
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subjects_keyboard(exclude=["–ë–∏–æ—Ö–∏–º–∏—è"]))
        return

    if role == "student":
        # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è", callback_data="action|register")],
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="action|materials")],
        ])
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        return

# –î–µ–π—Å—Ç–≤–∏—è —É—á–µ–Ω–∏–∫–∞
@typing_action
async def student_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = update.effective_user.id
    action = q.data.split("|")[1]  # register / materials
    users_data[user_id]["action"] = action

    if action == "register":
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subjects_keyboard(exclude=["–ë–∏–æ—Ö–∏–º–∏—è"]))
    else:
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=subjects_keyboard())

# –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
@typing_action
async def choose_subject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = update.effective_user.id
    subject = q.data.split("|")[1]
    users_data[user_id]["subject"] = subject

    role = users_data[user_id].get("role")
    action = users_data[user_id].get("action")

    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö:
    # - –ó–∞–ø–∏—Å—å (student/parent): –ù–ò–ö + –ö–õ–ê–°–° + –¢–ï–õ–ï–§–û–ù
    # - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (student): –ù–ò–ö + –ö–õ–ê–°–°, —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
    if role in ("student", "parent") and action == "register":
        await ensure_nickname_then_continue(update, context, need_class=True, need_phone=True)
    elif role == "student" and action == "materials":
        await ensure_nickname_then_continue(update, context, need_class=True, need_phone=False)
    elif role == "university":
        # —Å—é–¥–∞ –æ–±—ã—á–Ω–æ –Ω–µ –ø–æ–ø–∞–¥–µ–º, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await ensure_nickname_then_continue(update, context, need_class=False, need_phone=False)
    else:
        await ensure_nickname_then_continue(update, context, need_class=False, need_phone=False)

# --- –°–ë–û–† –ù–ò–ö–ù–ï–ô–ú–ê / –ö–õ–ê–°–°–ê / –¢–ï–õ–ï–§–û–ù–ê ---

async def ensure_nickname_then_continue(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                        need_class: bool, need_phone: bool):
    user_id = update.effective_user.id
    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å username
    username = get_username(update)
    if username:
        users_data[user_id]["nickname"] = username
        if need_class:
            users_data[user_id]["next_need_phone"] = need_phone
            await ask_class(update)
        else:
            if need_phone:
                await ask_phone(update)
            else:
                await finalize_and_materials(update, context)
    else:
        # –ü—Ä–æ—Å–∏–º –Ω–∏–∫–Ω–µ–π–º —Ç–µ–∫—Å—Ç–æ–º
        users_data[user_id]["step"] = "nickname"
        await reply(update, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username):")

@typing_action
async def nickname_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–¥—ë–º –Ω–∏–∫
    if users_data.get(user_id, {}).get("step") != "nickname":
        return
    text = (update.message.text or "").strip()
    if not text.startswith("@") or len(text) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.")
        return
    users_data[user_id]["nickname"] = text
    users_data[user_id]["step"] = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –¥–∞–ª—å—à–µ –Ω—É–∂–Ω–æ
    role = users_data[user_id].get("role")
    action = users_data[user_id].get("action")
    if role in ("student", "parent") and action == "register":
        # –ù—É–∂–µ–Ω –∫–ª–∞—Å—Å + —Ç–µ–ª–µ—Ñ–æ–Ω
        users_data[user_id]["next_need_phone"] = True
        await ask_class(update)
    elif role == "student" and action == "materials":
        # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å
        users_data[user_id]["next_need_phone"] = False
        await ask_class(update)
    else:
        # –°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞ / –ø—Ä–æ—á–µ–µ ‚Äî –±–µ–∑ –∫–ª–∞—Å—Å–∞/—Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await finalize_and_materials(update, context)

async def ask_class(update: Update):
    await reply(update, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=class_keyboard())

@typing_action
async def class_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = update.effective_user.id
    choice = q.data.split("|")[1]  # 5/6/7/8/10/OGE/EGE
    users_data[user_id]["class"] = choice

    need_phone = users_data[user_id].pop("next_need_phone", False)
    if need_phone:
        await ask_phone(update)
    else:
        await finalize_and_materials(update, context)

async def ask_phone(update: Update):
    users_data[update.effective_user.id]["step"] = "phone"
    kb = ReplyKeyboardMarkup([[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
                             resize_keyboard=True, one_time_keyboard=True)
    await reply(update, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@typing_action
async def phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if users_data.get(user_id, {}).get("step") != "phone":
        return
    contact = update.message.contact
    if not contact:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
        return
    users_data[user_id]["phone"] = contact.phone_number
    users_data[user_id]["step"] = None
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await finalize_and_materials(update, context)

# --- –§–ò–ù–ê–õ: –°–û–•–†–ê–ù–ï–ù–ò–ï + –ü–û–î–ü–ò–°–ö–ê + –ú–ï–ù–Æ –ú–ê–¢–ï–†–ò–ê–õ–û–í ---

async def finalize_and_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = users_data.get(user_id, {}).copy()
    data.setdefault("subject", "-")
    data.setdefault("class", "-")
    data.setdefault("phone", "-")
    data.setdefault("role", "-")
    data.setdefault("action", "-")
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.datetime.now(tz)
    timestamp_for_sheets = now.strftime("%Y-%m-%d %H:%M:%S")  # ISO –¥–ª—è Google Sheets
    timestamp_for_admin = now.strftime("%d.%m.%Y %H:%M")      # –ö—Ä–∞—Å–∏–≤–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    data["timestamp"] = timestamp_for_sheets


    # –ü–∏—à–µ–º –≤ Google Sheets
    await asyncio.to_thread(write_to_sheet, {
        "timestamp": timestamp_for_sheets,
        "role": data["role"],
        "action": data["action"],
        "subject": data["subject"],
        "class": data["class"],
        "nickname": data.get("nickname", "-"),
        "phone": data.get("phone", "-"),
        "user_id": user_id
    })

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    note = (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞/–∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        f"üìÖ –í—Ä–µ–º—è: {timestamp_for_admin}\n"
        f"üéì –†–æ–ª—å: {data['role']}\n"
        f"üß© –î–µ–π—Å—Ç–≤–∏–µ: {data['action']}\n"
        f"üìò –ü—Ä–µ–¥–º–µ—Ç: {data['subject']}\n"
        f"üßë‚Äçüéì –ö–ª–∞—Å—Å/–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {data['class']}\n"
        f"üë§ –ù–∏–∫: {data.get('nickname', '-')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '-')}\n"
        f"üÜî ID: {user_id}"
    )
    await notify_admin(context, note)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–µ–¥–º–µ—Ç–∞ ‚Äî –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    subject = data["subject"]
    if subject and subject in CHANNELS_BY_SUBJECT:
        subscribed = await check_subscription(context, user_id, subject)
        if not subscribed:
            await reply(
                update,
                f"‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNELS_BY_SUBJECT[subject]} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            # –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏, —á—Ç–æ–±—ã —é–∑–µ—Ä –º–æ–≥ –ø–æ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            await return_to_role_selection(update)
            return

    # –ü–æ–∫–∞–∑ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
    await send_materials_menu(update, context, subject)

    # –ò —Å—Ä–∞–∑—É –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    await return_to_role_selection(update)

async def send_materials_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, subject: str):
    files = materials_files.get(subject, [])
    if not files:
        await reply(update, "üìÇ –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(name, callback_data=f"material|{subject}|{i}")]
        for i, (name, _) in enumerate(files)
    ])
    await reply(update, f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ {subject}:", reply_markup=kb)

@typing_action
async def send_material_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        _, subject, idx_str = q.data.split("|")
        idx = int(idx_str)
    except Exception:
        await q.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    files = materials_files.get(subject, [])
    if idx >= len(files):
        await q.message.reply_text("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    filename, filepath = files[idx]
    try:
        progress = await q.message.reply_text("–ì–æ—Ç–æ–≤–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")
        total = 10
        for step in range(1, total + 1):
            await asyncio.sleep(0.25)
            bar = "‚ñà" * step + "‚ñë" * (total - step)
            await progress.edit_text(f"–ì–æ—Ç–æ–≤–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª‚Ä¶ [{bar}] {step*10}%")
        with open(filepath, "rb") as f:
            await q.message.reply_document(document=InputFile(f), filename=filename)
        try:
            await progress.delete()
        except:
            pass
    except FileNotFoundError:
        await q.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    except Exception as e:
        print(f"[Material] –û—à–∏–±–∫–∞: {e}")
        await q.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")

# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
async def return_to_role_selection(update: Update):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£—á–µ–Ω–∏–∫", callback_data="role|student")],
        [InlineKeyboardButton("–†–æ–¥–∏—Ç–µ–ª—å", callback_data="role|parent")],
        [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç –í–£–ó–∞", callback_data="role|university")],
        [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role|teacher")],
    ])
    await asyncio.sleep(0.6)
    await reply(update, "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:", reply_markup=kb)

# ================== MAIN ==================

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    app = ApplicationBuilder().token(token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # Callback-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(choose_role, pattern=r"^role\|"))
    app.add_handler(CallbackQueryHandler(student_action, pattern=r"^action\|"))
    app.add_handler(CallbackQueryHandler(choose_subject, pattern=r"^subject\|"))
    app.add_handler(CallbackQueryHandler(class_choice, pattern=r"^class\|"))
    app.add_handler(CallbackQueryHandler(send_material_file, pattern=r"^material\|"))

    # –¢–µ–∫—Å—Ç –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ step == nickname)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, nickname_input))

    # –ö–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω)
    app.add_handler(MessageHandler(filters.CONTACT, phone_input))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    main()

    


